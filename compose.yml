services:

  mc1-db:
    container_name: mc1-db
    image: postgres:15-alpine
    restart: on-failure
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=mc1
      - POSTGRES_PASSWORD=mc1
      - POSTGRES_DB=mc1
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - multi-microservices


  mc2-db:
    container_name: mc2-db
    image: postgres:15-alpine
    restart: on-failure
    ports:
      - "5450:5432"
    environment:
      - POSTGRES_USER=mc2
      - POSTGRES_PASSWORD=mc2
      - POSTGRES_DB=mc2
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - multi-microservices

  zookeeper:
    container_name: zookeeper-local
    image: confluentinc/cp-zookeeper:6.2.4
    healthcheck:
      test: [ "CMD","nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - multi-microservices

  kafka:
    container_name: kafka-local
    image: confluentinc/cp-kafka:6.2.4
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    healthcheck:
      test: [ "CMD","nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: OUTSIDE://:29092,INTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - multi-microservices

  grpc-client:
    container_name: grpc-client
    build:
      context: ./grpc-client
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://mc1-db:5432/mc1
    ports:
      - "6565:6565"
    depends_on:
      - kafka
      - mc1-db
    networks:
      - multi-microservices

  kafka-client:
    container_name: kafka-client
    build:
      context: ./kafka-client
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://mc2-db:5432/mc2
    ports:
      - "8081:8080"
    depends_on:
      - kafka
      - mc2-db
    networks:
      - multi-microservices

  aggregator:
    container_name: aggregator
    build:
      context: ./aggregator
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - kafka-client
    networks:
      - multi-microservices

networks:
  multi-microservices: